#!/bin/bash

. Load

TargetDomain=$1
if [[ $TargetDomain == "" ]]; then 
    Error 'Domain is not provided';
    exit;
fi

HostServer=$(cat /PaydarCore/Deployment/Hosts/$1 2>/dev/null | grep HostServer | cut -d ' ' -f2)
if [[ $HostServer == "" ]]; then 
    HostServer=$TargetDomain
fi

ServerPath=$(cat /PaydarCore/Deployment/Hosts/$1 2>/dev/null | grep ServerPath | cut -d ' ' -f2)
if [[ $ServerPath == "" ]]; then 
    Error 'ServerPath is not available in the Local Hosts';
    exit;
fi

ProjectPath=$(cat /PaydarCore/Deployment/Hosts/$1 2>/dev/null | grep ProjectPath | cut -d ' ' -f2)
if [[ $ProjectPath == "" ]]; then 
    Error 'ProjectPath is not available in the Local Hosts';
    exit;
fi

Protocol=$(cat /PaydarCore/Deployment/Hosts/$1 2>/dev/null | grep Protocol | cut -d ' ' -f2)
if [[ $Protocol == "" ]]; then 
    Protocol='http'
fi

Info Validating server path...
if [[ ! `ssh root@$HostServer test -f $ServerPath/$TargetDomain.conf && echo exists` ]] ; then
    Error "Nginx configuration is not created for $TargetDomain"
    exit
fi
Success "$ServerPath exists"
Divide

Info Validating nginx config on server...
if [[ ! `ssh root@$HostServer test -f /etc/nginx/conf.d/$TargetDomain.conf && echo exists` ]] ; then
    Error "Nginx is not configured for $TargetDomain"
    exit
fi
Success "$TargetDomain.conf exists"
Divide

cd $ProjectPath

Info "Building the project..."
Divide

Build

Info "Project build finished"
Divide

sudo chmod 777 /Build
cd /Build

export Hash=$(cat /Build/hash)

Info "Hash node_$Hash"

Info "Compressing the built output..."

cd /$ProjectPath
if IsSite; then
    cd /Build
    zip -rq publish.zip .next public next.config.js next.js package.json
elif IsPanel; then
    cd /Build
    zip -r publish.zip assets hash images index.html
elif IsApi; then
    cd /Build
    zip -r publish.zip ./**
fi

Info "Built output is compressed"
Divide
Success "Compressing Done"
Divide

export HostServer=$HostServer
export TargetDomain=$TargetDomain
export ServerPath=$ServerPath
export ProjectPath=$ProjectPath
export Protocol=$Protocol
export ServerPort=$(ssh root@$HostServer "/PaydarCore/ServerLinux/Commands/Port $TargetDomain")

Divide
Success "Telemetry Info"
Info HostServer: $HostServer
Info TargetDomain: $TargetDomain
Info ProjectPath: $ProjectPath
Info ServerPath: $ServerPath
Info Protocol: $Protocol
Info ServerPort: $ServerPort

cd /$ProjectPath

if IsSite; then
    envsubst < /PaydarCore/ServerLinux/DeployerTemplates/Site > /Build/$TargetDomain.deployer
elif IsPanel; then
    envsubst < /PaydarCore/ServerLinux/DeployerTemplates/Panel > /Build/$TargetDomain.deployer
elif IsApi; then
    envsubst < /PaydarCore/ServerLinux/DeployerTemplates/Api > /Build/$TargetDomain.deployer
fi

envsubst < /PaydarCore/ServerLinux/Commands/TelemetryTemplate > /Build/$TargetDomain.telemetry

Divide
Info "Removing old deployment..."

ssh root@$HostServer "rm -rf $ServerPath/$TargetDomain.deployer $ServerPath/publish.zip $ServerPath/$TargetDomain.telemetry"
Info "Old deployment files deleted"

Divide
Info "Uploading started..."

scp /Build/$TargetDomain.deployer root@$HostServer:$ServerPath
scp /Build/$TargetDomain.telemetry root@$HostServer:$ServerPath
scp /Build/publish.zip root@$HostServer:$ServerPath

Info "Project uploaded."
Divide
Success "Uploading Done"

Divide
Info "Deploying the project..."

ssh root@$HostServer "chmod 777 $ServerPath/$TargetDomain.telemetry"
ssh root@$HostServer "chmod 777 $ServerPath/$TargetDomain.deployer"
ssh root@$HostServer "$ServerPath/$TargetDomain.deployer" &
