#!/bin/bash

. Load

function SetJsConfig()
{
    declare -A Aliases
    Aliases[Base]=Base/Exports
    Aliases[AppBase]=Base/AppExports
    Aliases[Hooks]=Hooks/Exports
    Aliases[Contexts]=Contexts/Exports
    while read ModulePath
    do
        ModuleName=$(echo $ModulePath | cut -d'/' -f5)
        Aliases[$ModuleName]="Modules/$ModuleName/Exports"
    done <<< "$(find /$Repository/$Project/Modules -name Exports.jsx)"
    while IFS=$'\t' read Dir
    do
        if [[ $Dir == "" ]]; then
            continue;
        fi
        Alias=$(basename $Dir)
        Path="$Dir/Exports"
        ReplacedPath="${Path/\/$Repository\/$Project\//}"
        Aliases[$Alias]=$ReplacedPath

        IFS=$'\n' SortedAliases=($(sort <<<"${Aliases[@]}"))
        unset IFS

    done <<< "$(find /$Repository/$Project/Components -mindepth 1 -type f -name 'Exports.jsx' | sort | xargs -r dirname)"

    jq -n --argjson n "${#Aliases[@]}" '
        { compilerOptions: {
                baseUrl: ".",
                paths:
                (
                        reduce range($n) as $i ({};
                                .[$ARGS.positional[$i]] = [$ARGS.positional[$i+$n]]
                        )
                )
        } }' --args "${!Aliases[@]}" "${Aliases[@]}" > /$Repository/$Project/jsconfig.json
}

function SetExports()
{
    Content=""
    while read FileName
    do
        FileNameWithoutExtension="${FileName/.jsx/}"
        Content="${Content}import $FileNameWithoutExtension from './$FileNameWithoutExtension'\n"
    done <<< "$(find $Directory -mindepth 1 -maxdepth 1 -type f -name "*.jsx" -not -name 'Exports.jsx' -printf '%f\n' | sort)"
    Content="${Content}\n"
    while read FileName
    do
        FileNameWithoutExtension="${FileName/.jsx/}"
        Content="${Content}export { $FileNameWithoutExtension }\n"
    done <<< "$(find $Directory -mindepth 1 -maxdepth 1 -type f -name "*.jsx" -not -name 'Exports.jsx' -printf '%f\n' | sort)"
    if [ -f $Directory/Exports.jsx ]; then
        CurrentContent=$(cat $Directory/Exports.jsx)
        if [[ $(echo $CurrentContent | xargs) != $(echo $Content | xargs) ]]; then
            Info "Updating Exports.jsx of $Directory"
            echo -e -n $Content > $Directory/Exports.jsx
        else
            Success 'equal'
        fi
    else
        Info "Creating Exports.jsx for the first time in $Directory"
        echo -e -n $Content > $Directory/Exports.jsx
    fi
}

SetJsConfig

inotifywait -m /$Repository/$Project/Components -r \
-e modify \
-e move \
-e create \
-e delete \
-q \
--exclude "Exports.jsx" |
while IFS=' ' read Directory Event File
do
    export Directory
    export Event
    export File
    SetJsConfig
    SetExports
done
